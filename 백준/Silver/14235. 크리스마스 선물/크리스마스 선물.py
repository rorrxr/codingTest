"""
문제 분석
1. 입력 형식:

- 첫 번째 줄에는 n이 주어지며, 이는 총 방문 횟수를 나타냅니다.
- 그 다음 n개의 줄에서 두 가지 상황을 나타냅니다:
- 선물 충전: 숫자 a > 0이면 a개의 선물의 가치가 뒤따르고, 산타의 썰매에 선물이 충전됩니다.
- 아이들에게 선물: 숫자 a = 0이면, 썰매에 있는 선물 중 가장 큰 선물을 아이에게 주고 그 선물을 썰매에서 빼야 합니다. 만약 선물이 없다면 -1을 출력합니다.

2. 주요 요구사항:

- 아이들에게 줄 선물은 가장 큰 선물이어야 합니다.
- 선물이 없을 때는 -1을 출력해야 합니다.

3. 해결 방법:

- 선물을 관리하는 데는 **우선순위 큐(최대 힙)**를 사용할 수 있습니다.
- Python에서 heapq 모듈은 최소 힙을 지원하지만, 최대 힙처럼 사용하려면 선물의 가치를 음수로 저장하여 관리하면 됩니다.
- 선물 충전 시 선물을 힙에 추가하고, 아이를 만났을 때는 힙에서 가장 큰 값을 꺼내 출력하면 됩니다.

4. 해결 전략
4-1 최대 힙 구현:
heapq는 기본적으로 최소 힙이므로, 선물을 음수로 바꿔서 삽입하면 최대 힙처럼 사용할 수 있습니다.

4-2 선물 주기:
아이들을 만날 때 a == 0이면 힙에서 가장 큰 값을 꺼내 출력합니다. 만약 힙이 비어 있다면 -1을 출력합니다.
"""

import heapq
import sys

input = sys.stdin.readline

# 선물들을 관리할 최대 힙 (파이썬에서는 음수로 바꾸어 최대 힙처럼 사용)
max_heap = []

# 방문 횟수 n
n = int(input())

# n번의 방문을 처리
for _ in range(n):
    data = list(map(int, input().split()))
    
    a = data[0]
    
    # a가 0이면 아이들에게 선물을 주는 상황
    if a == 0:
        if max_heap:
            # 가장 큰 선물을 꺼내어 출력 (음수로 넣었으므로 다시 음수를 붙여 원래 값을 반환)
            print(-heapq.heappop(max_heap))
        else:
            # 선물이 없다면 -1을 출력
            print(-1)
    else:
        # 선물 충전 (a개의 선물이 들어옴)
        for value in data[1:]:
            # 선물의 가치를 음수로 넣어 최대 힙처럼 사용
            heapq.heappush(max_heap, -value)
