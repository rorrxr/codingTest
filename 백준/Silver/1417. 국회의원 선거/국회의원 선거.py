"""
코드 동작 설명
입력 받기:

첫 번째 줄에서 후보의 수 n을 입력받고, 두 번째 줄에서 다솜이의 득표수 win을 입력받습니다.
나머지 후보들의 득표수를 nums 리스트에 저장합니다. 이때 우선순위 큐에서 가장 큰 값을 쉽게 꺼낼 수 있도록 득표수를 음수로 저장합니다.
우선순위 큐 사용:

heapq.heappush(nums, -num)를 사용하여 후보들의 득표수를 우선순위 큐에 저장합니다. 음수로 저장하여 heapq가 최소 힙을 최대 힙처럼 사용할 수 있게 만듭니다.
매수 로직:

nums에서 가장 큰 득표수를 가진 후보를 하나씩 꺼내서 다솜이의 득표수와 비교합니다.
만약 다른 후보의 득표수가 다솜이의 득표수보다 많다면, 그 후보를 매수하여 1표를 다솜이에게 주고, 매수한 사람 수(cnt)를 증가시킵니다.
매수한 후보의 득표수는 하나 줄어들며, 다시 우선순위 큐에 넣습니다.
다솜이의 득표수가 다른 후보들의 득표수를 모두 초과하면 더 이상 매수할 필요가 없으므로 반복문을 종료합니다.
결과 출력:

매수해야 하는 사람의 최소 수 cnt를 출력합니다.

다솜이의 득표수는 5표입니다.
2번 후보와 3번 후보는 각각 7표를 얻었으므로, 다솜이는 이들 중 1표씩 매수해야 합니다.
매수 후 다솜이의 득표수는 7표로 증가하고, 다른 후보들보다 더 많은 득표수를 가지게 됩니다.
따라서 2명이 매수되면 다솜이가 당선됩니다.

"""
import sys
import heapq

input = sys.stdin.readline

# 입력 받기
n = int(input())  # 후보의 수
win = int(input())  # 다솜이의 득표수
nums = []  # 다른 후보들의 득표수를 담을 리스트

# 나머지 후보들의# 득표수 입력
for _ in range(n - 1):
    num = int(input())
    heapq.heappush(nums, -num)  # 우선순위 큐에 음수로 저장하여 최대 힙처럼 사용

cnt = 0  # 매수한 사람의 수

# 우선순위 큐에서 가장 큰 득표수를 가진 후보를 하나씩 처리
while nums:
    max_vote = -heapq.heappop(nums)  # 음수를 풀어 원래 값을 얻음
    
    if max_vote >= win:  # 다솜이보다 득표수가 많은 후보가 있다면
        max_vote -= 1  # 한 표를 매수해서 다솜이에게 추가
        win += 1  # 다솜이 득표수 증가
        cnt += 1  # 매수한 사람 수 증가
        heapq.heappush(nums, -max_vote)  # 다시 우선순위 큐에 넣음
    else:
        break  # 더 이상 매수할 필요가 없으면 종료

# 결과 출력
print(cnt)