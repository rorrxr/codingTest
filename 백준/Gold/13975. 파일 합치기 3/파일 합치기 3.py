"""
소설가인 김대전은 소설을 여러 장(chapter)으로 나누어 쓰는데, 
각 장은 각각 다른 파일에 저장하곤 한다. 

소설의 모든 장을 쓰고 나서는 각 장이 쓰여진 파일을 합쳐서 
최종적으로 소설의 완성본이 들어있는 한 개의 파일을 만든다. 

이 과정에서 두 개의 파일을 합쳐서 하나의 임시파일을 만들고, 
이 임시파일이나 원래의 파일을 계속 두 개씩 합쳐서 파일을 합쳐나가고, 
최종적으로는 하나의 파일로 합친다. 

두 개의 파일을 합칠 때 필요한 비용(시간 등)이 두 파일 크기의 합이라고 가정할 때, 

**최종적인 한 개의 파일을 완성하는데 필요한 비용의 총 합**을 계산하시오.

------------------------------------------------
예시:

예를 들어, C1, C2, C3, C4가 네 개의 장을 수록하고 있는 파일이고, 
파일 크기가 각각 40, 30, 30, 50 이라고 하자. 

이 파일들을 합치는 과정에서, 먼저 C2와 C3를 합쳐서 임시파일 X1을 만든다. 

이때 비용 60이 필요하다. 
그 다음으로 C1과 X1을 합쳐 임시파일 X2를 만들면 비용 100이 필요하다. 
최종적으로 X2와 C4를 합쳐 최종파일을 만들면 비용 150이 필요하다. 

따라서, 최종의 한 파일을 만드는데 필요한 비용의 합은 60+100+150=310 이다. 
다른 방법으로 파일을 합치면 비용을 줄일 수 있다. 

먼저 C1과 C2를 합쳐 임시파일 Y1을 만들고, 
C3와 C4를 합쳐 임시파일 Y2를 만들고, 
최종적으로 Y1과 Y2를 합쳐 최종파일을 만들 수 있다. 
이때 필요한 총 비용은 70+80+150=300 이다.
-------------------------------------------

소설의 각 장들이 수록되어 있는 파일의 크기가 주어졌을 때, 
이 파일들을 하나의 파일로 합칠 때 필요한 최소비용을 계산하는 프로그램을 작성하시오.

입력
프로그램은 표준 입력에서 입력 데이터를 받는다. 
프로그램의 입력은 T개의 테스트 데이터로 이루어져 있는데, 
T는 입력의 맨 첫 줄에 주어진다.

각 테스트 데이터는 두 개의 행으로 주어지는데, 

첫 행에는 소설을 구성하는 장의 수를 나타내는 양의 정수 K (3 ≤ K ≤ 1,000,000)가 주어진다. 
두 번째 행에는 1장부터 K장까지 수록한 파일의 크기를 나타내는 양의 정수 K개가 주어진다. 
파일의 크기는 10,000을 초과하지 않는다.

출력
프로그램은 표준 출력에 출력한다. 
각 테스트 데이터마다 정확히 한 행에 출력하는데, 모든 장을 합치는데 필요한 최소비용을 출력한다.
"""

# Keyword : 자료구조, 그리디 알고리즘, 우선순위 큐

import sys
import heapq

input = sys.stdin.readline

# 테스트 케이스의 수
T = int(input())

for _ in range(T):
    # 소설을 구성하는 장의 수 K 입력
    K = int(input())
    
    # 파일 입력
    files = list(map(int, input().split()))  
    
    # 총 비용 초기화
    total_cost = 0
    
    # 힙 생성
    heapq.heapify(files)
    
    while len(files) > 1:
        # 가장 작은 두 파일을 꺼냄
        first_small = heapq.heappop(files)
        second_small = heapq.heappop(files)
        
        # 총 비용에 가장 작은 두 파일을 합침
        cost = first_small + second_small
        total_cost += cost
        
        # 합친 파일을 다시 큐에 삽입
        heapq.heappush(files, cost)
    
    # 최종적으로 합쳐진 파일을 만들기 위한 최소 비용 출력
    print(total_cost)